variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CERT_OPTS: "-Djavax.net.ssl.keyStore=/tmp/keystore.p12  -Djavax.net.ssl.keyStoreType=pkcs12 -Djavax.net.ssl.keyStorePassword=$KEYSTORE_PASSWORD"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

# This template uses jdk8 for verifying and deploying images
image: maven:3.8.5-openjdk-8

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository
    - .m2/tags.json

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  script:
    - 'base64 -d $KEYSTORE_JKS >/tmp/keystore.p12'
    - 'mvn $MAVEN_CLI_OPTS verify'
  except:
    variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Verify merge requests using JDK8
verify:jdk8:
  <<: *verify

# To deploy packages from CI, create a ci_settings.xml file
# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for more details.
# Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.
# For `master` branch run `mvn deploy` automatically.
maven_deploy:
  stage: deploy
  script:
    - 'which ssh-agent'
    - 'eval $(ssh-agent -s)'
    - 'base64 -d $KEYSTORE >/tmp/keystore.p12'
    - mkdir "$HOME/.docker"
    - cp $DOCKER_CONFIG_JSON "$HOME/.docker/config.json"
    - mvn deploy $MAVEN_CLI_OPTS  $MAVEN_CERT_OPTS -s $DEPLOYER_SETTINGS  -Darguments="$MAVEN_CERT_OPTS"
  rules:
    - if: $CI_COMMIT_TAG != null
    - when: manual

maven_compile:
  stage: test
  script:
    - 'base64 -d $KEYSTORE >/tmp/keystore.p12'
    - mkdir "$HOME/.docker"
    - cp $DOCKER_CONFIG_JSON "$HOME/.docker/config.json"
    - mvn package $MAVEN_CLI_OPTS  $MAVEN_CERT_OPTS -s $DEPLOYER_SETTINGS  -Darguments="$MAVEN_CERT_OPTS"

maven_release:
  stage: deploy
  script:
    - 'eval $(ssh-agent -s)'
    - chmod 600 "$GITLAB_SSH_KEY"  "$GITHUB_SSH_KEY"
    - 'ssh-add "$GITLAB_SSH_KEY"'
    - 'ssh-add "$GITHUB_SSH_KEY"'
    - mkdir -p ~/.ssh
    - 'echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - 'base64 -d $KEYSTORE >/tmp/keystore.p12'
    - rm -rf ../clone
    - mvn scm:checkout -DscmVersion="$CI_COMMIT_BRANCH" -DscmVersionType=branch -DcheckoutDirectory=../clone
    - cd ../clone
    - 'git remote add gitlab "ssh://git@gitlab.internal.soffid.com:2224/${CI_PROJECT_PATH}.git"' 
    - git config pull.rebase true
    - git pull gitlab "$CI_COMMIT_PATH" --no-edit
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git config --global user.name "$GITLAB_USER_NAME"
    - mvn release:prepare $MAVEN_CLI_OPTS  $MAVEN_CERT_OPTS -s $DEPLOYER_SETTINGS --batch-mode -DtagNameFormat='version-@{project.version}' -DpreparationGoals='install'
    - git remote -v
    - git push gitlab "$CI_COMMIT_BRANCH"
    - git push gitlab --tags
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: manual

release_job_mvn:
  stage: deploy
  script: 
    - links=$(
      first="true" ;
      mvn -q -Dexec.executable='echo' -Dexec.args='${project.groupId} ${project.version} ${project.artifactId} ${project.packaging}' exec:exec | 
      while read a b c d ;
      do
        if [[ "$first" == "false" ]] ;
        then 
          echo ,  ;
        fi ;
        first=false ;
        echo '{"name":"'$c'","url":"https://download.soffid.com/maven/'$(echo $a|sed 's/\./\//g' )/$c/$b/$c-$b.$d'","link_type":"other"}'; 
      done)
    - echo $links
    - "echo wget --header \"JOB-TOKEN: $CI_JOB_TOKEN\" --content-on-error https://gitlab.internal.soffid.com/api/v4/projects/$CI_PROJECT_ID/releases --post-data '{\"tag_name\": \"'$CI_COMMIT_TAG'\", \"name\": \"Release test\", \"assets\":{\"links\": ['$links']}, \"description\": \"Automatically created '$EXTRA_DESCRIPTION'\"}' " 
    - "wget -O - --header \"JOB-TOKEN: $CI_JOB_TOKEN\" --header \"Content-Type: application/json\" --content-on-error https://gitlab.internal.soffid.com/api/v4/projects/$CI_PROJECT_ID/releases --method POST --body-data '{\"tag_name\": \"'$CI_COMMIT_TAG'\", \"name\": \"Release test\", \"assets\":{\"links\": ['$links']}, \"description\": \"Automatically created '$EXTRA_DESCRIPTION'\"}' " 
  rules: 
     - if: $CI_COMMIT_TAG                  # Run this job when a tag is created manually
#     - when: manual

